const e={ID:"token-action-hud-pf2e"},t={ID:"token-action-hud-core"},i="1.4",s={1:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>A</span>",2:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>D</span>",3:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>T</span>",free:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>F</span>",reaction:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>R</span>",passive:"",A:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>A</span>",D:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>D</span>",T:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>T</span>",F:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>F</span>",R:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>R</span>"},a={action:"ITEM.TypeAction",attribute:"tokenActionHud.pf2e.attribute",auxAction:"PF2E.WeaponStrikeLabel",condition:"ITEM.TypeCondition",effect:"ITEM.TypeEffect",familiarAttack:"PF2E.AttackLabel",feat:"PF2E.Item.Feat.LevelLabel",item:"PF2E.ItemTitle",save:"tokenActionHud.pf2e.save",skill:"PF2E.SkillLabel",skillAction:"tokenActionHud.pf2e.skillAction",spell:"ITEM.TypeSpell",strike:"PF2E.WeaponStrikeLabel",toggle:"tokenActionHud.pf2e.toggle",utility:"tokenActionHud.utility"},n={acrobatics:"acr",arcana:"arc",athletics:"ath",crafting:"cra",deception:"dec",diplomacy:"dip",intimidation:"itm",medicine:"med",nature:"nat",occultism:"occ",performance:"prf",religion:"rel",society:"soc",stealth:"ste",survival:"sur",thievery:"thi"},o={melee:'<img class="alt-usage-icon" src="systems/pf2e/icons/mdi/sword.svg" title="Melee Usage" style="\n            border: 0;\n            filter: invert(1) drop-shadow(1px 1px 1px rgba(0, 0, 0, 1));\n            left: 2px;\n            padding-top: 3px;\n            position: relative;\n            ">',thrown:'<img class="alt-usage-icon" src="systems/pf2e/icons/mdi/thrown.svg" title="Thrown Usage" style="\n            border: 0;\n            filter: invert(1) drop-shadow(1px 1px 1px rgba(0, 0, 0, 1));\n            left: 2px;\n            padding-top: 3px;\n            position: relative;\n            ">'},l={melee:{name:"PF2E.WeaponRangeMelee"},ranged:{name:"PF2E.NPCAttackRanged"},thrown:{name:"PF2E.TraitThrown"}},c={attack:{id:"attack",name:"PF2E.AttackLabel",type:"system"},toggles:{id:"toggles",name:"PF2E.TogglesLabel",type:"system"},strikes:{id:"strikes",name:"PF2E.StrikesLabel",type:"system"},actions:{id:"actions",name:"PF2E.ActionsActionsHeader",type:"system"},reactions:{id:"reactions",name:"PF2E.ActionsReactionsHeader",type:"system"},freeActions:{id:"free-actions",name:"PF2E.ActionsFreeActionsHeader",type:"system"},passives:{id:"passives",name:"PF2E.NPC.PassivesLabel",type:"system"},skillActionsGrouped:{id:"skill-actions-grouped",name:"tokenActionHud.pf2e.skillActions",listName:"tokenActionHud.pf2e.skillActionsGrouped",type:"system"},skillActionsUngrouped:{id:"skill-actions-ungrouped",name:"tokenActionHud.pf2e.skillActions",listName:"tokenActionHud.pf2e.skillActionsUngrouped",type:"system",settings:{sort:!0}},weapons:{id:"weapons",name:"PF2E.InventoryWeaponsHeader",type:"system"},armor:{id:"armor",name:"PF2E.InventoryArmorHeader",type:"system"},equipment:{id:"equipment",name:"PF2E.InventoryEquipmentHeader",type:"system"},consumables:{id:"consumables",name:"PF2E.InventoryConsumablesHeader",type:"system"},containers:{id:"containers",name:"PF2E.InventoryBackpackHeader",type:"system"},treasure:{id:"treasure",name:"PF2E.InventoryTreasureHeader",type:"system"},ancestryFeatures:{id:"ancestry-features",name:"PF2E.FeaturesAncestryHeader",type:"system"},classFeatures:{id:"class-features",name:"PF2E.FeaturesClassHeader",type:"system"},ancestryFeats:{id:"ancestry-feats",name:"PF2E.FeatAncestryHeader",type:"system"},classFeats:{id:"class-feats",name:"PF2E.FeatClassHeader",type:"system"},skillFeats:{id:"skill-feats",name:"PF2E.FeatSkillHeader",type:"system"},generalFeats:{id:"general-feats",name:"PF2E.FeatGeneralHeader",type:"system"},bonusFeats:{id:"bonus-feats",name:"PF2E.FeatBonusHeader",type:"system"},spells:{id:"spells",name:"PF2E.SpellLabelPlural",type:"system"},heroPoints:{id:"hero-points",name:"PF2E.HeroPointsLabel",type:"system"},initiative:{id:"initiative",name:"PF2E.InitiativeLabel",type:"system"},perceptionCheck:{id:"perception-check",name:"PF2E.PerceptionLabel",type:"system"},coreSkills:{id:"core-skills",name:"PF2E.CoreSkillsHeader",type:"system"},loreSkills:{id:"lore-skills",name:"PF2E.LoreSkillsHeader",type:"system"},conditions:{id:"conditions",name:"PF2E.ConditionsLabel",type:"system"},effects:{id:"effects",name:"PF2E.EffectsLabel",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},recoveryCheck:{id:"recovery-check",name:"PF2E.Check.Specific.Recovery",type:"system"},rests:{id:"rests",name:"tokenActionHud.pf2e.rests",type:"system"},saves:{id:"saves",name:"PF2E.SavesHeader",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"}},r={l5pbgrj8SSNtRGs8:{name:"PF2E.Actions.AdministerFirstAid.Stabilize.Title",skill:"medicine",image:"systems/pf2e/icons/features/feats/treat-wounds.webp"},ZEWD4zcEDQwYhVT8:{name:"PF2E.Actions.AdministerFirstAid.StopBleeding.Title",skill:"medicine",image:"systems/pf2e/icons/conditions/persistent-damage.webp"},"55mxH0w8UkY1o3Xv":{name:"PF2E.Actions.Balance.Title",skill:"acrobatics",image:"icons/skills/movement/feet-winged-boots-brown.webp"},LXCy1iJddD95Z91s:{name:"PF2E.Actions.Climb.Title",skill:"athletics",image:"icons/sundries/misc/ladder.webp"},"9RNumMausgG7adgL":{name:"PF2E.Actions.Coerce.Title",skill:"intimidation",image:"icons/skills/social/intimidation-impressing.webp"},xcrdOOiN0l6O1sIn:{name:"PF2E.Actions.CommandAnAnimal.Title",skill:"nature",image:"icons/environment/creatures/horse-white.webp"},zn0HadZeoKDALxRu:{name:"PF2E.Actions.ConcealAnObject.Title",skill:"stealth",image:"systems/pf2e/icons/equipment/adventuring-gear/wax-key-blank.webp"},Tu7LIRelQsiOuo1l:{name:"PF2E.Actions.Craft.Title",skill:"crafting",image:"icons/skills/trades/smithing-anvil-silver-red.webp"},aDsYSdRqiC6qQIOQ:{name:"PF2E.Actions.CreateADiversion.DistractingWords.Title",skill:"deception",image:"icons/magic/control/mouth-smile-deception-purple.webp"},zUJ0UhuoFt5a7tiN:{name:"PF2E.Actions.CreateADiversion.Gesture.Title",skill:"deception",image:"icons/skills/social/wave-halt-stop.webp"},"1JpYPlIkjyseE9JU":{name:"PF2E.Actions.CreateADiversion.Trick.Title",skill:"deception",image:"systems/pf2e/icons/spells/charming-words.webp"},mNphXpAkmGsMadUv:{name:"PF2E.Actions.CreateForgery.Title",skill:"society",image:"systems/pf2e/icons/spells/transcribe-moment.webp"},U6WjxFPn4fUqIrfl:{name:"PF2E.Actions.DecipherWriting.Title",skill:"arcana",image:"icons/skills/trades/academics-book-study-runes.webp"},RZyfkw1DiqVy3JUC:{name:"PF2E.Actions.DecipherWriting.Title",skill:"occultism",image:"icons/skills/trades/academics-book-study-purple.webp"},sDUERv4E88G5BRPr:{name:"PF2E.Actions.DecipherWriting.Title",skill:"religion",image:"systems/pf2e/icons/equipment/other/spellbooks/thresholds-of-truth.webp"},YWAvvDXpdW1fYPFo:{name:"PF2E.Actions.DecipherWriting.Title",skill:"society",image:"icons/skills/trades/academics-study-reading-book.webp"},nEwqNNWX6scLt4sc:{name:"PF2E.Actions.Demoralize.Title",skill:"intimidation",image:"icons/skills/social/intimidation-impressing.webp"},T2QNEoRojMWEec4a:{name:"PF2E.Actions.DisableDevice.Title",skill:"thievery",image:"systems/pf2e/icons/equipment/adventuring-gear/thieves-tools.webp"},ooiO59Ch2QaebOmc:{name:"PF2E.Actions.Disarm.Title",skill:"athletics",image:"icons/skills/melee/sword-damaged-broken-glow-red.webp"},"50Q0DYL33Kalu1BH":{name:"PF2E.Actions.Escape.Title",skill:"acrobatics",image:"icons/skills/movement/feet-winged-boots-glowing-yellow.webp"},lkEcQQss16SIrVxM:{name:"PF2E.Actions.Escape.Title",skill:"athletics",image:"icons/skills/movement/feet-winged-boots-glowing-yellow.webp"},RjfPFjqPrNve6eeh:{name:"PF2E.Actions.Feint.Title",skill:"deception",image:"icons/skills/melee/maneuver-sword-katana-yellow.webp"},yMTKMnaYSGtDz4wk:{name:"PF2E.Actions.ForceOpen.Title",skill:"athletics",image:"icons/equipment/feet/boots-armored-steel.webp"},rCgGPEyXbzLFcio6:{name:"PF2E.Actions.GatherInformation.Title",skill:"diplomacy",image:"icons/skills/social/diplomacy-handshake.webp"},i95kcGLIQKOTsnv6:{name:"PF2E.Actions.Grapple.Title",skill:"athletics",image:"icons/skills/melee/unarmed-punch-fist.webp"},FlM3HvpnsZpCKawG:{name:"PF2E.Actions.Hide.Title",skill:"stealth",image:"systems/pf2e/icons/features/classes/wild.webp"},v3dlDjFlOmT5T2gC:{name:"PF2E.Actions.HighJump.Title",skill:"athletics",image:"icons/skills/movement/arrows-up-trio-red.webp"},k5nW4jGyXD0Oq9LR:{name:"PF2E.Actions.Impersonate.Title",skill:"deception",image:"icons/equipment/head/mask-carved-scream-tan.webp"},VTg4t8kYTvXcHROq:{name:"PF2E.Actions.Lie.Title",skill:"deception",image:"icons/magic/control/mouth-smile-deception-purple.webp"},QPsV0qi2zXm7syt6:{name:"PF2E.Actions.LongJump.Title",skill:"athletics",image:"icons/skills/movement/figure-running-gray.webp"},"1Sj2Pz3VI2SFWqZw":{name:"PF2E.Actions.MakeAnImpression.Title",skill:"diplomacy",image:"icons/environment/people/commoner.webp"},"9Ul5Op5OceT9P5SS":{name:"PF2E.Actions.ManeuverInFlight.Title",skill:"acrobatics",image:"icons/commodities/biological/wing-bird-white.webp"},Gj68YCVlDjc75iCP:{name:"PF2E.Actions.PalmAnObject.Title",skill:"thievery",image:"icons/sundries/gaming/playing-cards.webp"},dWcrojMk0d2WRPBq:{name:"PF2E.Actions.Perform.Singing.Title",skill:"performance",image:"icons/skills/trades/music-singing-voice-blue.webp"},"8YrH37NzKRuiKFbF":{name:"PF2E.Actions.PickALock.Title",skill:"thievery",image:"icons/sundries/misc/lock-bronze-reinforced.webp"},BQTA7bL264189Xla:{name:"PF2E.Actions.Repair.Title",skill:"crafting",image:"icons/tools/smithing/anvil.webp"},tbveXG4gaIoKnsWX:{name:"PF2E.Actions.Request.Title",skill:"diplomacy",image:"icons/skills/social/thumbsup-approval-like.webp"},tikhJ2b6AMh7wQU7:{name:"PF2E.Actions.Seek.Title",skill:"perception",image:"icons/tools/scribal/magnifying-glass.webp"},LN67MgbGE8IHb2X0:{name:"PF2E.Actions.SenseDirection.Title",skill:"survival",image:"icons/tools/navigation/compass-brass-blue-red.webp"},PmHt7Gb5fCrlWWTr:{name:"PF2E.Actions.SenseMotive.Title",skill:"perception",image:"icons/environment/people/commoner.webp"},yNry1xMZqdWHncbV:{name:"PF2E.Actions.Shove.Title",skill:"athletics",image:"systems/pf2e/icons/spells/hydraulic-push.webp"},HSTkVuv0SjTNK3Xx:{name:"PF2E.Actions.Sneak.Title",skill:"stealth",image:"systems/pf2e/icons/conditions/unnoticed.webp"},UKHPveLpG7hUs4D0:{name:"PF2E.Actions.Squeeze.Title",skill:"acrobatics",image:"icons/commodities/tech/claw-mechanical.webp"},zjovbAeuLvyuWFKd:{name:"PF2E.Actions.Steal.Title",skill:"thievery",image:"icons/containers/bags/coinpouch-gold-red.webp"},mkKko3CEBCyJVQw1:{name:"PF2E.Actions.Subsist.Title",skill:"society",image:"icons/environment/settlement/building-rubble.webp"},zkqh01BoXDVgydzo:{name:"PF2E.Actions.Subsist.Title",skill:"survival",image:"icons/environment/wilderness/camp-improvised.webp"},TIlUkCzviYxdVk4E:{name:"PF2E.Actions.Swim.Title",skill:"athletics",image:"icons/creatures/fish/fish-shark-swimming.webp"},Al5LYMMdeDcpC9Br:{name:"PF2E.Actions.Track.Title",skill:"survival",image:"systems/pf2e/icons/conditions/observed.webp"},m4iM5r3TfvQs5Y2n:{name:"PF2E.Actions.TreatDisease.Title",skill:"medicine",image:"icons/magic/nature/root-vine-caduceus-healing.webp"},R03LRl2RBbsm6EcF:{name:"PF2E.Actions.TreatPoison.Title",skill:"medicine",image:"systems/pf2e/icons/effects/treat-poison.webp"},gRj7xUfcpUZQLrOC:{name:"PF2E.Actions.Trip.Title",skill:"athletics",image:"icons/skills/wounds/bone-broken-marrow-yellow.webp"},"2qhYHkcSsTJoSwrJ":{name:"PF2E.Actions.TumbleThrough.Title",skill:"acrobatics",image:"icons/skills/movement/feet-winged-sandals-tan.webp"}},d={acrobatics:{name:"PF2E.SkillAcrobatics"},arcana:{name:"PF2E.SkillArcana"},athletics:{name:"PF2E.SkillAthletics"},crafting:{name:"PF2E.SkillCrafting"},deception:{name:"PF2E.SkillDeception"},diplomacy:{name:"PF2E.SkillDiplomacy"},intimidation:{name:"PF2E.SkillIntimidation"},lore:{name:"PF2E.SkillLore"},medicine:{name:"PF2E.SkillMedicine"},nature:{name:"PF2E.SkillNature"},occultism:{name:"PF2E.SkillOccultism"},perception:{name:"PF2E.PerceptionLabel"},performance:{name:"PF2E.SkillPerformance"},religion:{name:"PF2E.SkillReligion"},society:{name:"PF2E.SkillSociety"},stealth:{name:"PF2E.SkillStealth"},survival:{name:"PF2E.SkillSurvival"},thievery:{name:"PF2E.SkillThievery"}};let m=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{m=class Utils{static getSetting(i,s=null){let a=s??null;try{a=game.settings.get(e.ID,i)}catch{t.api.Logger.debug(`Setting '${i}' not found`)}return a}static async setSetting(i,s){try{s=await game.settings.set(e.ID,i,s),t.api.Logger.debug(`Setting '${i}' set to '${s}'`)}catch{t.api.Logger.debug(`Setting '${i}' not found`)}}}}));let p=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{p=class ActionHandler extends e.api.ActionHandler{actors=null;actorId=null;actorType=null;tokenId=null;items=null;abbreviateSkills=null;calculateAttackPenalty=null;colorSkills=null;groupIds=null;activationGroupIds=null;effectGroupIds=null;inventoryGroupIds=null;spellGroupIds=null;featureActions=null;inventoryActions=null;spellActions=null;async buildSystemActions(t){this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type;if(!this.actorType||["character","npc","familiar"].includes(this.actorType)){if(this.actor){let t=this.actor.items;t=e.api.Utils.sortItemsByName(t),this.items=t}this.abbreviateSkills=m.getSetting("abbreviateSkills"),this.calculateAttackPenalty=m.getSetting("calculateAttackPenalty"),this.colorSkills=m.getSetting("colorSkills"),this.groupIds=t,"character"===this.actorType&&await this._buildCharacterActions(),"familiar"===this.actorType&&await this._buildFamiliarActions(),"npc"===this.actorType&&await this._buildNpcActions(),this.actor||this._buildMultipleTokenActions()}}async _buildCharacterActions(){this._buildActions(),this._buildCombat(),await this._buildConditions(),this._buildEffects(),this._buildFeats(),this._buildHeroPoints(),this._buildInitiative(),this._buildInventory(),this._buildPerceptionCheck(),this._buildRecoveryCheck(),this._buildRests(),this._buildSaves(),this._buildSkillActions(),this._buildSkills(),await this._buildSpells(),this._buildStrikes(),this._buildToggles()}async _buildFamiliarActions(){this._buildAttack(),this._buildCombat(),await this._buildConditions(),this._buildEffects(),this._buildInventory(),this._buildPerceptionCheck(),this._buildSaves(),this._buildSkills()}async _buildNpcActions(){this._buildActions(),this._buildCombat(),await this._buildConditions(),this._buildEffects(),this._buildFeats(),this._buildInitiative(),this._buildInventory(),this._buildPerceptionCheck(),this._buildSaves(),this._buildSkillActions(),this._buildSkills(),this._buildStrikes(),await this._buildSpells()}_buildMultipleTokenActions(){this._buildInitiative(),this._buildPerceptionCheck(),this._buildSaves(),this._buildSkillActions(),this._buildSkills()}_buildActions(){if(0===this.items.size)return;const e=["action","reaction","free","passive"],t=new Map([...this.items].filter((t=>"action"===t[1].type||e.includes(t[1].system?.actionType?.value)))),i=new Map;for(const[e,s]of t){const t=s.system.actionType?.value;switch(t){case"action":i.has("actions")||i.set("actions",new Map),i.get("actions").set(e,s);break;case"reaction":i.has("reactions")||i.set("reactions",new Map),i.get("reactions").set(e,s);break;case"free":i.has("free-actions")||i.set("free-actions",new Map),i.get("free-actions").set(e,s);break;case"passive":i.has("passives")||i.set("passives",new Map),i.get("passives").set(e,s)}}for(const[e,t]of i){const i=t,s={id:e,type:"system"};this._addActions(i,s,"action")}}_buildAttack(){const t="familiarAttack",i=this.actor.system.attack;if(i){const s=i.slug,n=i.name.charAt(0).toUpperCase()+i.name.slice(1),o=`${`${e.api.Utils.i18n(a[t])}: `??""}${n}`,l=[t,s].join(this.delimiter),c=[{id:s,name:n,listName:o,encodedValue:l,info1:i.totalModifier<0?i.totalModifier:`+${i.totalModifier}`}],r={id:"attack",type:"system"};this.addActions(c,r)}}_buildCombat(){const t="utility",i={endTurn:{id:"endTurn",name:e.api.Utils.i18n("tokenActionHud.endTurn")}};game.combat?.current?.tokenId!==this.token?.id&&delete i.endTurn;const s=Object.entries(i).map((i=>{const s=i[1].id,n=i[1].name,o=`${`${e.api.Utils.i18n(a[t])}: `??""}${n}`,l=[t,s].join(this.delimiter);return{id:s,name:n,listName:o,encodedValue:l}}));this.addActions(s,{id:"combat",type:"system"})}async _buildConditions(){const t="condition",i=["doomed","dying","wounded"],s=new Map([...this.items].filter((e=>e[1].type===t)).map((e=>{const t=e[1];return[t.slug,t]}))),n=[...game.pf2e.ConditionManager.conditions].filter((e=>!e[0].startsWith("Compendium")));n.forEach((e=>{e[1].name=e[1].name.replace(" 1","")}));const o=n.map((n=>{const o=n[1].slug,l=s.get(n[0]),c=l?.id,r=n[1].name,d=`${`${e.api.Utils.i18n(a[t])}: `??""}${r}`,m=[t,o].join(this.delimiter),p=e.api.Utils.getImage(n[1]),u=`toggle${c?" active":""}`;let h="";if(c)if(i.includes(l.slug)){const e=this.actor.system.attributes[l.slug],t=e.value,i=e.max;h={text:i>0?`${t??0}/${i}`:""}}else l.system.value.isValued&&(h={text:l.system.value.value});return{id:o,name:r,listName:d,encodedValue:m,cssClass:u,img:p,info1:h}}));await this.addActions(o,{id:"conditions",type:"system"})}async _buildHeroPoints(){const t="heroPoints",i=this.actor.system.resources?.heroPoints,s=i.value,a=i.max,n=[{id:"heroPoints",name:e.api.Utils.i18n("PF2E.HeroPointsLabel"),encodedValue:[t,t].join(this.delimiter),info1:{text:a>0?`${s??0}/${a}`:""}}];this.addActions(n,{id:"hero-points",type:"system"})}_buildEffects(){const e=new Map([...this.items].filter((e=>"effect"===e[1].type&&(!e[1].system?.unidentified&&!e[1].unidentified||game.user.isGM))));this._addActions(e,{id:"effects",type:"system"},"effect")}_buildFeats(){const e={ancestryfeature:"ancestry-features",classfeature:"class-features",ancestry:"ancestry-feats",class:"class-feats",skill:"skill-feats",general:"general-feats",bonus:"bonus-feats"},t=new Map;for(const[i,s]of this.items){if("feat"!==s.type)continue;const a=e[s.system?.category??s.featType];t.has(a)||t.set(a,new Map),t.get(a).set(i,s)}for(const[e,i]of t){const t=i,s={id:e,type:"system"};this._addActions(t,s,"feat")}}_buildInitiative(){const t=this.actor?this.actor.system.attributes.initiative:"PF2E.InitiativeLabel",i=t.totalModifier,s=i||0===i?`${i>=0?"+":""}${i}`:"",a=[{id:"initiative",name:t.label?t.label:"string"==typeof t?e.api.Utils.i18n(t):"",encodedValue:["initiative","initiative"].join(this.delimiter),info1:{text:s}}];this.addActions(a,{id:"initiative",type:"system"})}async _buildInventory(){if(0===this.items.size)return;const e=new Map;for(const[t,i]of this.items){const s=i.system?.quantity>0,a=this._isEquippedItem(i),n=i.type;s&&(a&&(e.has("equipped")||e.set("equipped",new Map),e.get("equipped").set(t,i)),a||(e.has("unequipped")||e.set("unequipped",new Map),e.get("unequipped").set(t,i)),a&&("armor"===n&&"character"===this.actorType&&(e.has("armors")||e.set("armors",new Map),e.get("armors").set(t,i)),"consumable"===n&&(e.has("consumables")||e.set("consumables",new Map),e.get("consumables").set(t,i)),"backpack"===n&&(e.has("containers")||e.set("containers",new Map),e.get("containers").set(t,i)),"equipment"===n&&(e.has("equipment")||e.set("equipment",new Map),e.get("equipment").set(t,i)),"treasure"===n&&(e.has("treasure")||e.set("treasure",new Map),e.get("treasure").set(t,i)),"weapon"===n&&(e.has("weapons")||e.set("weapons",new Map),e.get("weapons").set(t,i))))}for(const[t,i]of e){const e=i,s={id:t,type:"system"};this._addActions(e,s)}if(e.has("containers")){const t={id:"containers",type:"system"},i=e.get("containers");for(const[e,s]of i){const i=s,a=i.contents;if(!a.size)continue;const n={id:e,name:i.name,listName:`Group: ${i.name}`,type:"system-derived"};await this.addGroup(n,t);const o=new Map(a.map((e=>[e.id,e])));this._addActions(o,n)}}}_buildPerceptionCheck(){const t=this.actor?this.actor.system.attributes.perception:CONFIG.PF2E.attributes.perception;if(!t.totalModifier)return;const i=t.totalModifier,s=i||0===i?`${i>=0?"+":""}${i}`:"",a=[{id:"perception",name:e.api.Utils.i18n(CONFIG.PF2E.attributes.perception),encodedValue:["perceptionCheck","perception"].join(this.delimiter),info1:{text:s}}];this.addActions(a,{id:"perception-check",type:"system"})}_buildRecoveryCheck(){const t="recoveryCheck",i=this.actor.system.attributes?.dying;if(i?.value>=1){const i=[{id:t,name:e.api.Utils.i18n("PF2E.Check.Specific.Recovery"),encodedValue:[t,t].join(this.delimiter)}],s={id:"recovery-check",type:"system"};this.addActions(i,s)}}_buildRests(){if(!this.actor&&!this.actors.every((e=>"character"===e.type)))return;const t="utility",i=[{id:"treatWounds",name:e.api.Utils.i18n("PF2E.Actions.TreatWounds.Label"),encodedValue:[t,"treatWounds"].join(this.delimiter)},{id:"rest",name:e.api.Utils.i18n("PF2E.Actor.Character.Rest.Label"),encodedValue:[t,"rest"].join(this.delimiter)}];game.settings.get("pf2e","staminaVariant")&&i.push({id:"takeBreather",name:e.api.Utils.i18n("tokenActionHud.pf2e.takeBreather"),encodedValue:[t,"takeBreather"].join(this.delimiter)});this.addActions(i,{id:"rests",type:"system"})}_buildSaves(){const t="save",i=this.actor?Object.entries(this.actor.saves||[]):Object.entries(CONFIG.PF2E.saves);if(!i)return;const s=i.map((i=>{const s=i[0],n=i[1].label??("string"==typeof i[1]?e.api.Utils.i18n(i[1]):""),o=`${`${e.api.Utils.i18n(a[t])}: `??""}${n}`,l=[t,s].join(this.delimiter);return{id:s,name:n,listName:o,encodedValue:l}}));this.addActions(s,{id:"saves",type:"system"})}async _buildSkillActions(){const t="compendiumMacro",i=await game.packs.get("pf2e.action-macros").getIndex();if(!i.size)return;const s=new Map,n=[];for(const o of i){const i=r[o._id];if(!i)continue;const l=o._id,c=e.api.Utils.i18n(i.name),m=`${c} - ${e.api.Utils.i18n(d[i.skill]?.name)}`,p=`${`${e.api.Utils.i18n(a.skillAction)}: `??""}${m}`,u=[t,"pf2e.action-macros",l].join(this.delimiter),h=i.image,y=this.actor?.skills[i.skill]?.check?.mod,f={id:l,name:m,listName:p,encodedValue:u,img:h,info1:this.actor?{text:y||0===y?`${y>=0?"+":""}${y}`:""}:""};n.push(f),s.has(i.skill)||s.set(i.skill,new Map),s.get(i.skill).set(o._id,{...f,name:c})}this.addActions(n,{id:"skill-actions-ungrouped",type:"system"});for(const[t,i]of Object.entries(d)){const a=t,n=e.api.Utils.i18n(i.name),o=s.get(a);if(!o)continue;const l={id:a,name:n,type:"system-derived"};await this.addGroup(l,{id:"skill-actions-grouped",type:"system"});const c=[...o].map((e=>e[1]));this.addActions(c,l)}}_buildSkills(){const t="skill",i=this.actor?Object.entries(this.actor.skills).filter((e=>!!e[1].label&&e[1].label.length>1)):this._getSharedSkills();if(!i)return;const s=new Map;for(const e of i){const t=e[1].lore;s.has("skills")||s.set("skills",new Map),s.get("skills").set(e[0],e[1]),t&&(s.has("lore-skills")||s.set("lore-skills",new Map),s.get("lore-skills").set(e[0],e[1])),t||(s.has("core-skills")||s.set("core-skills",new Map),s.get("core-skills").set(e[0],e[1]))}for(const[i,o]of s){const s={id:i,type:"system"},l=[...o].map((i=>{const s=i[0],o=i[1],l=e.api.Utils.i18n(o.label)??e.api.Utils.i18n(CONFIG.PF2E.skillList[i[0]]),c=this.abbreviatedSkills?n[o.slug]??l:l,r=`${`${e.api.Utils.i18n(a[t])}: `??""}${c}`,d=[t,s].join(this.delimiter),m=this.actor&&this.colorSkills&&o.rank>0?`tah-pf2e-skill-rank-${o.rank}`:"",p=o.check?.mod;return{id:s,name:c,listName:r,encodedValue:d,cssClass:m,info1:this.actor?{text:p||0===p?`${p>=0?"+":""}${p}`:""}:""}}));this.addActions(l,s)}}_getSharedSkills(){if(!this.actors)return;const e=this.actors.map((e=>Object.entries(e.skills).filter((e=>!!e[1].label&&e[1].label.length>1)))),t=Math.min(...e.map((e=>e.length)));return e.find((e=>e.length===t)).filter((t=>e.every((e=>e.some((e=>e[0]===t[0]))))))}async _buildSpells(){const t={id:"spells",type:"system"},i=[...this.items].filter((e=>"spellcastingEntry"===e[1].type));for(const s of i){const i=`spells+${s[1].name.slugify({replacement:"-",strict:!0})}`,a={id:i,name:s[1].name,type:"system-derived",info1:this._getSpellDcInfo(s[1])};await this.addGroup(a,t),this.addGroupInfo(a);const n=await(s[1].getSpellData?s[1].getSpellData():s[1].getSheetData()),o=n.levels.filter((e=>e.active.length>0));for(const t of Object.entries(o)){const s=t[1].level,o={id:`${i}+${s}`,name:String(e.api.Utils.i18n(t[1].label)),type:"system-derived"};await this.addGroup(o,a),await this._addSpellSlotInfo(a,o,t,n);const l=t[1].active.filter((e=>!e?.expended&&e)).map((e=>e.spell)),c=new Map(l.map((e=>[e.id,e])));await this._addActions(c,o,"spell",s)}}}async _addSpellSlotInfo(t,i,s,n){const o=s[1].isCantrip,l=n.isFlexible,c=n.isFocusPool,r=n.isInnate,d=n.isPrepared;if(!c&&(o||r))return;if(!c&&d&&!l)return;const m="spellSlot",p=this.actor.system.resources.focus,u=s[1].uses,h=c?"focus":`slot${s[1].level}`,y="focus"===h?p?.max:u?.max,f={text:y>=0?`${("focus"===h?p?.value:u?.value)??0}/${y}`:""};i.info={info1:f},this.addGroupInfo(i);const k=e.api.Utils.i18n(a.spell),g=[{id:`${n.id}>${h}>slotIncrease`,name:"+",listName:`${k}: ${t.name}: ${i.name}: +`,encodedValue:[m,`${n.id}>${h}>slotIncrease`].join(this.delimiter),cssClass:"shrink"},{id:`${n.id}>${h}>slotDecrease`,name:"-",listName:`${k}: ${t.name}: ${i.name}: -`,encodedValue:[m,`${n.id}>${h}>slotDecrease`].join(this.delimiter),cssClass:"shrink"}];this.addActions(g,i)}_buildStrikes(){const t="strike",i={id:"strikes",type:"system"},s=this.actor.system.actions.filter((e=>e.type===t&&(e.item.system.quantity>0||"npc"===this.actor.type)));if(s)for(const n of s){const s=`strikes+${`${n.item.id}-${n.slug}`}`,c=n.label,r=`${e.api.Utils.i18n(a.strike)}: ${n.label} (${n.item.id})`,d={id:s,name:c,listName:r,type:"system-derived"};if(this.addGroup(d,i),n.auxiliaryActions?.length){const t="auxAction",i=n.auxiliaryActions.map(((e,t)=>{const i=encodeURIComponent(`${n.item.id}>${n.slug}>${t}>`),s=e.label;return{id:i,name:s,listName:`${r}: ${s}`,actionIcon:e.img}})),s={img:n.imageUrl};i[0]&&(i[0].img=e.api.Utils.getImage(s));const a=i.map((e=>this._getAction(t,e)));this.addActions(a,d)}const m=n.altUsages?[n,...n.altUsages]:[n];for(const i of m){const a=n.glyph;let c;switch(`${i.item.isMelee}_${i.item.isThrown}_${i.item.isRanged}`){case"true_false_false":c="melee";break;case"false_true_true":c="thrown";break;case"false_false_true":c="ranged"}const p=`${s}+${c}`,u=i.attackRollType?e.api.Utils.i18n(i.attackRollType):e.api.Utils.i18n(l[c].name),h=`${r}: ${u}`,y="thrown"!==c&&a?`<span style='font-family: "Pathfinder2eActions"; font-size: var(--font-size-20);'>${a}</span>`:o[c],f={showTitle:m.length>1},k={id:p,name:u,listName:h,icon:y,type:"system-derived",settings:f};this.addGroup(k,d);const g=i.ready,b=i.variants.map(((e,i)=>{const s=encodeURIComponent(`${n.item.id}>${n.slug}>${i}>`+c),a=e.label.includes("MAP")?n.totalModifier+parseInt(e.label.split(" ")[1]):parseInt(e.label.split(" ")[1]),o=this.calculateAttackPenalty?a>=0?`+${a}`:`${a}`:e.label;return{actionType:t,id:s,name:o,listName:`${h}: ${o}`,systemSelected:g}})),A=encodeURIComponent(`${n.item.id}>${n.slug}>damage>${c}`),v=e.api.Utils.i18n("PF2E.DamageLabel"),_=`${h}: ${v}`;b.push({actionType:t,id:A,name:v,listName:_,systemSelected:g});const P=encodeURIComponent(`${n.item.id}>${n.slug}>critical>${c}`),w=e.api.Utils.i18n("PF2E.CriticalDamageLabel"),F=`${h}: ${w}`;if(b.push({actionType:t,id:P,name:w,listName:F,systemSelected:g}),i.selectedAmmoId&&!i.ammunition){const s=this.actor.items.get(i.selectedAmmoId);if(s)s.actionType=t,b.push(s);else{const i="noAmmo",s=e.api.Utils.i18n("tokenActionHud.pf2e.noAmmo"),a=`${h}: ${s}`;b.push({actionType:t,id:i,name:s,listName:a,systemSelected:g})}}const I=b.map((e=>this._getAction(t,e)));this.addActions(I,k)}}}_buildToggles(){const t="toggle",i=this.actor.system.toggles;if(!i.length)return;const s=i.map((i=>{const s=[i.domain,i.option].join("."),a=e.api.Utils.i18n(i.label);return{id:s,encodedValue:[t,JSON.stringify(i)].join(this.delimiter),name:a,cssClass:`toggle${i.checked?" active":""}`}}));this.addActions(s,{id:"toggles",type:"system"})}_getAttributePoolAction(e,t,i,s){const a=t.slugify({replacement:"-",strict:!0});return{id:a,name:t,encodedValue:[e,a].join(this.delimiter),info1:{text:`${i}/${s}`}}}async _addActions(e,t,i="item",s=null){if(0===e.size)return;if(!("string"==typeof t?t:t?.id))return;const a=[...e].map((e=>this._getAction(i,e[1],s)));await this.addActions(a,t)}_getAction(t,i,s){const n="spell"===t?`${i.id??i._id}-${s}`:i.id??i._id,o=i?.name??i?.label,l=`${e.api.Utils.i18n(a[t])}: `??"",c=i.listName??`${l}${o}`;let r="";if(Object.hasOwn(i,"disabled")){r=`toggle${i.disabled?"":" active"}`}const d=i?.spellcasting?.id,m=[t,"spell"===t?`${d}>${s}>${i.id??i._id}`:n].join(this.delimiter),p=i.system?.actions,u=i.system?.actionType?.value,h=p?parseInt((p||{}).value,10):null,y=i.system?.time?.value,f=i.actionIcon,k="spell"===t?y:["free","reaction","passive"].includes(u)?u:h??f,g=this._getActionIcon(k),b=e.api.Utils.getImage(i),A="spell"===t?this._getSpellInfo(i):this._getItemInfo(i),v=A?.info1,_=A?.info2,P=A?.info3;return{id:n,name:o,encodedValue:m,cssClass:r,img:b,icon1:g,info1:v,info2:_,info3:P,listName:c,systemSelected:i?.systemSelected??null}}_isSlowAction(e){return["downtime","exploration"].includes(e.system.traits?.value)}_getSpellDcInfo(t){let i="";const s=t.statistic,a="function"==typeof s.dc?s.dc().value:s.dc.value,n=s.check.mod;return i=`${n>=0?`${e.api.Utils.i18n("tokenActionHud.pf2e.atk")} +${n}`:`${e.api.Utils.i18n("tokenActionHud.pf2e.atk")} ${n}`} ${`${e.api.Utils.i18n("tokenActionHud.pf2e.dc")}${a}`}`,i}_getSpellInfo(e){return{info1:this._getComponentsInfo(e),info2:this._getUsesData(e)}}_getComponentsInfo(e){return{text:e.components.value??e.system.components?.value??"",title:Object.entries(e.components).filter((e=>!0===e[1])).map((e=>e[0].trim().charAt(0).toUpperCase()+e[0].slice(1))).join(", ")}}_getUsesData(e){const t=e?.uses?.value,i=e?.uses?.max;return{text:t&&i>=0?`${t}/${i}`:""}}_getActors(){const e=["character","npc"],t=canvas.tokens.controlled.map((e=>e.actor));if(t.every((t=>e.includes(t.type))))return t}_isEquippedItem(e){const t=e.system.equipped?.carryType;return!!this.showUnequippedItems||!(!["held","worn"].includes(t)||e.system.containerId?.value?.length)}_getItemInfo(e){return{info1:{text:this._getQuantityData(e)??""}}}_getQuantityData(e){const t=e?.system?.quantity?.value;return t>1?t:""}_getActionIcon(e){return s[e]}_foundrySort(e,t){return e?.sort||t?.sort?e.sort-t.sort:0}}}));let u=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{const t=c;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`Group: ${e.api.Utils.i18n(t.listName??t.name)}`}));const i=Object.values(t);u={layout:[{nestId:"attack",id:"attack",name:e.api.Utils.i18n("PF2E.AttackLabel"),groups:[{...t.attack,nestId:"attack_attack"}]},{nestId:"strikes",id:"strikes",name:e.api.Utils.i18n("PF2E.StrikesLabel"),groups:[{...t.toggles,nestId:"strikes_toggles"},{...t.strikes,nestId:"strikes_strikes"}],settings:{customWidth:500}},{nestId:"actions",id:"actions",name:e.api.Utils.i18n("PF2E.ActionsActionsHeader"),groups:[{...t.actions,nestId:"actions_actions"},{...t.reactions,nestId:"actions_reactions"},{...t.freeActions,nestId:"actions_free-actions"},{...t.passives,nestId:"actions_passives"}]},{nestId:"inventory",id:"inventory",name:e.api.Utils.i18n("PF2E.TabInventoryLabel"),groups:[{...t.weapons,nestId:"inventory_weapons"},{...t.armor,nestId:"inventory_armor"},{...t.equipment,nestId:"inventory_equipment"},{...t.consumables,nestId:"inventory_consumables"},{...t.containers,nestId:"inventory_containers"},{...t.treasure,nestId:"inventory_treasure"}]},{nestId:"feats",id:"feats",name:e.api.Utils.i18n("PF2E.TabFeatsLabel"),groups:[{...t.ancestryFeatures,nestId:"feats_ancestry-features"},{...t.classFeatures,nestId:"feats_class-features"},{...t.ancestryFeats,nestId:"feats_ancestry-feats"},{...t.classFeats,nestId:"feats_class-feats"},{...t.skillFeats,nestId:"feats_skill-feats"},{...t.generalFeats,nestId:"feats_general-feats"},{...t.bonusFeats,nestId:"feats_bonus-feats"}]},{nestId:"spells",id:"spells",name:e.api.Utils.i18n("PF2E.SpellLabelPlural"),groups:[{...t.spells,nestId:"spells_spells"}]},{nestId:"attributes",id:"attributes",name:e.api.Utils.i18n("tokenActionHud.pf2e.attributes"),groups:[{...t.heroPoints,nestId:"attributes_hero-points"},{...t.initiative,nestId:"attributes_initiative"},{...t.perceptionCheck,nestId:"attributes_perception-check"},{...t.saves,nestId:"attributes_saves"}]},{nestId:"skills",id:"skills",name:e.api.Utils.i18n("PF2E.SkillsLabel"),groups:[{...t.coreSkills,nestId:"skills_core-skills"},{...t.loreSkills,nestId:"skills_lore-skills"}]},{nestId:"effects",id:"effects",name:e.api.Utils.i18n("PF2E.EffectsLabel"),groups:[{...t.conditions,nestId:"effects_conditions"},{...t.effects,nestId:"effects_effects"}]},{nestId:"utility",id:"utility",name:e.api.Utils.i18n("tokenActionHud.utility"),groups:[{...t.combat,nestId:"utility_combat"},{...t.token,nestId:"utility_token"},{...t.recoveryCheck,nestId:"utility_recovery-check"},{...t.rests,nestId:"utility_rests"},{...t.utility,nestId:"utility_utility"}]}],groups:i}}));let h=null;function register(t){game.settings.register(e.ID,"calculateAttackPenalty",{name:game.i18n.localize("tokenActionHud.pf2e.settings.calculateAttackPenalty.name"),hint:game.i18n.localize("tokenActionHud.pf2e.settings.calculateAttackPenalty.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}}),game.settings.register(e.ID,"colorSkills",{name:game.i18n.localize("tokenActionHud.pf2e.settings.colorSkills.name"),hint:game.i18n.localize("tokenActionHud.pf2e.settings.colorSkills.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}})}Hooks.once("tokenActionHudCoreApiReady",(async e=>{h=class RollHandler extends e.api.RollHandler{BLIND_ROLL_MODE="blindRoll";async doHandleActionEvent(e,t){const i=t.split("|");2!==i.length&&super.throwInvalidValueErr();const s=i[0],a=i[1];if(["item","feat","action","lore","ammo"].includes(s)&&this.isRenderItem())return this.doRenderItem(this.actor,a);const n=["character","familiar","npc"];if(this.actor)await this._handleMacros(e,s,this.actor,this.token,a);else{const t=canvas.tokens.controlled.filter((e=>n.includes(e.actor?.type)));for(const i of t){const t=i.actor;await this._handleMacros(e,s,t,i,a)}}}async _handleMacros(e,t,i,s,a){let n;i&&(n=i.type);if(!["ability","spell","item","skill","lore","utility","toggle","strike"].includes(t))switch(n){case"npc":await this._handleUniqueActionsNpc(e,t,i,s,a);break;case"character":case"familiar":await this._handleUniqueActionsChar(e,t,i,s,a)}switch(t){case"ability":this._rollAbility(e,i,a);break;case"action":case"feat":case"item":this._rollItem(i,a);break;case"condition":this._toggleCondition(i,a);break;case"effect":this._adjustEffect(i,a);break;case"spell":await this._rollSpell(i,a);break;case"skill":await this._rollSkill(e,i,a);break;case"strike":this._rollStrikeChar(e,i,a);break;case"toggle":await this._performToggleMacro(i,a);break;case"utility":this._performUtilityMacro(s,a)}}async _handleUniqueActionsChar(e,t,i,s,a){switch(t){case"save":this._rollSave(e,i,a);break;case"initiative":i.initiative.roll();break;case"attribute":case"perceptionCheck":this._rollAttributeChar(e,i,a);break;case"spellSlot":await this._adjustSpellSlot(i,a);break;case"heroPoints":await this._adjustResources("heroPoints","value",i);break;case"recoveryCheck":i.rollRecovery({event:e});break;case"familiarAttack":this._rollFamiliarAttack(e,i);break;case"auxAction":this._performAuxAction(i,a)}}async _handleUniqueActionsNpc(e,t,i,s,a){switch(t){case"initiative":i.initiative.roll();break;case"attribute":case"perceptionCheck":await this._rollAttributeNpc(e,i,a);break;case"save":this._rollSave(e,i,a);break;case"strike":this._rollStrikeNpc(e,i,a)}}async _rollSkill(e,t,i){const s=t.skills[i];await s.check.roll({event:e})}_rollAbility(e,t,i){t.rollAbility(e,i)}_rollAttributeChar(e,t,i){const s=t.system.attributes[i];if(s){const i=t.getRollOptions(["all",s]);s.roll({event:e,options:i})}else t.rollAttribute(e,i)}async _rollAttributeNpc(e,t,i){t.rollAttribute(e,i)}async _adjustSpellSlot(e,t){const i=decodeURIComponent(t).split(">"),s=i[0],a=i[1],n=i[2],o=e.items.get(s);let l,c,r;if("focus"===a)l=e.system.resources.focus.value,c=e.system.resources.focus.max;else{const e=o.system.slots;l=e[a].value,c=e[a].max}switch(n){case"slotIncrease":if(l>=c)break;l++;break;case"slotDecrease":if(l<=0)break;l--}"focus"===a?e.update({"data.resources.focus.value":l}):(r=[{_id:o.id,data:{slots:{[a]:{value:l}}}}],await Item.updateDocuments(r,{parent:e})),Hooks.callAll("forceUpdateTokenActionHUD")}_rollSave(e,t,i){t.saves[i].check.roll({event:e})}async _updateRollMode(e){await game.settings.set("core","rollMode",e)}_rollStrikeChar(e,t,i){const s=decodeURIComponent(i).split(">"),a=s[0],n=s[1],o=s[2],l=s[3]?s[3]:null;let c=null,r=t.system.actions.filter((e=>"strike"===e.type)).find((e=>e.item.id===a&&e.slug===n));if(this.isRenderItem()){const e=r.item;if(e&&"xxPF2ExUNARMEDxx"!==e.id)return this.doRenderItem(t,e.id)}if(r.altUsages?.length)switch(!0){case"melee"===l&&!r.item.isMelee:c=l,r=r.altUsages.find((e=>e.item.isMelee));break;case"ranged"===l&&!r.item.isRanged:c=l,r=r.altUsages.find((e=>e.item.isRanged));break;case"thrown"===l&&!r.item.isThrown:c=l,r=r.altUsages.find((e=>e.item.isThrown))}switch(o){case"damage":r.damage({event:e});break;case"critical":r.critical({event:e});break;default:r.variants[o]?.roll({event:e,altUsage:c})}}_performAuxAction(e,t){const i=decodeURIComponent(t).split(">"),s=i[0],a=i[1],n=i[2],o=i[3]?i[3]:null;let l=e.system.actions.filter((e=>"strike"===e.type)).find((e=>e.item.id===s&&e.slug===a));if(this.isRenderItem()){const t=l.origin;if(t)return this.doRenderItem(e,t.id)}o&&(l=l[o]),l.auxiliaryActions[n]?.execute()}_rollStrikeNpc(e,t,i){const s=decodeURIComponent(i).split(">"),a=s[0],n=s[1],o=s[2],l=t.system.actions.filter((e=>"strike"===e.type)).find((e=>e.item.id===a&&e.slug===n));if("plus"===a){const e=t.items.find((e=>0===o.toUpperCase().localeCompare(e.name.toUpperCase(),void 0,{sensitivity:"base"})));return this.isRenderItem()?this.doRenderItem(t,e.id):void e.toChat()}if(this.isRenderItem())return this.doRenderItem(t,a);switch(o){case"damage":l.rollNPCDamage(e);break;case"critical":l.rollNPCDamage(e,!0);break;case"0":l.rollNPCAttack(e);break;case"1":l.rollNPCAttack(e,2);break;case"2":l.rollNPCAttack(e,3)}}_rollItem(e,t){e.items.get(t).toChat()}_rollFamiliarAttack(e,t){const i=t.getRollOptions(["all","attack"]);t.system.attack.roll(e,i)}async _rollSpell(e,t){const i=decodeURIComponent(t).split(">"),[s,a,n,o]=i;if(this.isRenderItem())return this.doRenderItem(e,n);const l=e.items.get(s),c=e.items.get(n);l&&c&&(await l.cast(c,{message:!o,consume:!0,level:Number(a)}),Hooks.callAll("forceUpdateTokenActionHUD"))}async _performUtilityMacro(e,t){switch(t){case"treatWounds":this._executeMacroById("6duZj0Ygiqv712rq");break;case"rest":this._executeMacroById("0GU2sdy3r2MeC56x");break;case"takeBreather":this._executeMacroById("aS6F7PSUlS9JM5jr");break;case"endTurn":game.combat?.current?.tokenId===e.id&&await(game.combat?.nextTurn())}}async _executeMacroById(e){game.packs.get("pf2e.pf2e-macros").getDocument(e).then((e=>e.execute()))}async _adjustResources(e,t,i){let s=i.system.resources[e][t];const a=i.system.resources[e].max;if(this.rightClick){if(s<=0)return;s--}else{if(s>=a)return;s++}const n=[{_id:i.id,data:{resources:{[e]:{[t]:s}}}}];await Actor.updateDocuments(n),Hooks.callAll("forceUpdateTokenActionHUD")}async _toggleCondition(e,t){this.rightClick?e.decreaseCondition(t):e.increaseCondition(t),Hooks.callAll("forceUpdateTokenActionHUD")}async _adjustEffect(t,i){const s=e.api.Utils.getItem(t,i);this.rightClick?s.decrease():s.increase(),Hooks.callAll("forceUpdateTokenActionHUD")}async _performToggleMacro(e,t){const i=JSON.parse(t);i.domain&&i.option&&await e.toggleRollOption(i.domain,i.option,i.itemId)}}}));let y=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{y=class SystemManager extends e.api.SystemManager{doGetCategoryManager(t){return new e.api.CategoryManager}doGetActionHandler(e){return new p(e)}getAvailableRollHandlers(){return{core:"Core PF2E"}}doGetRollHandler(e){let t;return t=new h,t}doRegisterSettings(e){register(e)}async doRegisterDefaultFlags(){return u}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const t=game.modules.get(e.ID);t.api={requiredCoreModuleVersion:"1.4",SystemManager:y},Hooks.call("tokenActionHudSystemReady",t)}));export{s as ACTION_ICON,a as ACTION_TYPE,p as ActionHandler,t as CORE_MODULE,u as DEFAULTS,c as GROUP,e as MODULE,i as REQUIRED_CORE_MODULE_VERSION,h as RollHandler,d as SKILL,n as SKILL_ABBREVIATION,r as SKILL_ACTION,o as STRIKE_ICON,l as STRIKE_USAGE,y as SystemManager,m as Utils,register};
